;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 17/12/2024 16:34:21
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x020207  	LJMP 519
0x0003	0x020000  	LJMP 0
0x0006	0x00      	NOP
0x0007	0x00      	NOP
0x0008	0x00      	NOP
0x0009	0x00      	NOP
0x000A	0x00      	NOP
0x000B	0x020083  	LJMP 131
0x000E	0x00      	NOP
0x000F	0x00      	NOP
0x0010	0x00      	NOP
0x0011	0x00      	NOP
0x0012	0x00      	NOP
0x0013	0x020000  	LJMP 0
0x0016	0x00      	NOP
0x0017	0x00      	NOP
0x0018	0x00      	NOP
0x0019	0x00      	NOP
0x001A	0x00      	NOP
0x001B	0x020000  	LJMP 0
0x001E	0x00      	NOP
0x001F	0x00      	NOP
0x0020	0x00      	NOP
0x0021	0x00      	NOP
0x0022	0x00      	NOP
0x0023	0x020000  	LJMP 0
_Div_16x16_U:
;__Lib_Math.c,273 :: 		
;__Lib_Math.c,275 :: 		
0x0026	0xBD000B  	CJNE R5, 0, __op2hi_not_zero
;__Lib_Math.c,276 :: 		
0x0029	0xB90029  	CJNE R1, 0, __op1hi_not_zero
;__Lib_Math.c,277 :: 		
0x002C	0xE8      	MOV A, R0
;__Lib_Math.c,278 :: 		
0x002D	0x8CF0    	MOV B, R4
;__Lib_Math.c,279 :: 		
0x002F	0x84      	DIV AB
;__Lib_Math.c,280 :: 		
0x0030	0xF8      	MOV R0, A
;__Lib_Math.c,281 :: 		
0x0031	0xACF0    	MOV R4, B
;__Lib_Math.c,282 :: 		
0x0033	0x22      	RET
;__Lib_Math.c,284 :: 		
__op2hi_not_zero:
;__Lib_Math.c,285 :: 		
0x0034	0xE4      	CLR A
;__Lib_Math.c,286 :: 		
0x0035	0xCD      	XCH A, R5
;__Lib_Math.c,287 :: 		
0x0036	0xFF      	MOV R7, A
;__Lib_Math.c,288 :: 		
0x0037	0x75F008  	MOV B, 8
;__Lib_Math.c,290 :: 		
__Div_16x16_U_Loop1:
;__Lib_Math.c,291 :: 		
0x003A	0xE8      	MOV A, R0
;__Lib_Math.c,292 :: 		
0x003B	0x28      	ADD A, R0
;__Lib_Math.c,293 :: 		
0x003C	0xF8      	MOV R0, A
;__Lib_Math.c,294 :: 		
0x003D	0xE9      	MOV A, R1
;__Lib_Math.c,295 :: 		
0x003E	0x33      	RLC A
;__Lib_Math.c,296 :: 		
0x003F	0xF9      	MOV R1, A
;__Lib_Math.c,297 :: 		
0x0040	0xED      	MOV A, R5
;__Lib_Math.c,298 :: 		
0x0041	0x33      	RLC A
;__Lib_Math.c,299 :: 		
0x0042	0xFD      	MOV R5, A
;__Lib_Math.c,300 :: 		
0x0043	0xE9      	MOV A, R1
;__Lib_Math.c,301 :: 		
0x0044	0x9C      	SUBB A, R4
;__Lib_Math.c,302 :: 		
0x0045	0xED      	MOV A, R5
;__Lib_Math.c,303 :: 		
0x0046	0x9F      	SUBB A, R7
;__Lib_Math.c,304 :: 		
0x0047	0x4005    	JC __Div_16x16_U_Lab1
;__Lib_Math.c,305 :: 		
0x0049	0xFD      	MOV R5, A
;__Lib_Math.c,306 :: 		
0x004A	0xE9      	MOV A, R1
;__Lib_Math.c,307 :: 		
0x004B	0x9C      	SUBB A, R4
;__Lib_Math.c,308 :: 		
0x004C	0xF9      	MOV R1, A
;__Lib_Math.c,309 :: 		
0x004D	0x08      	INC R0
;__Lib_Math.c,311 :: 		
__Div_16x16_U_Lab1:
;__Lib_Math.c,312 :: 		
0x004E	0xD5F0E9  	DJNZ B, __Div_16x16_U_Loop1
;__Lib_Math.c,313 :: 		
0x0051	0xE4      	CLR A
;__Lib_Math.c,314 :: 		
0x0052	0xC9      	XCH A, R1
;__Lib_Math.c,315 :: 		
0x0053	0xFC      	MOV R4, A
;__Lib_Math.c,316 :: 		
0x0054	0x22      	RET
;__Lib_Math.c,318 :: 		
__op1hi_not_zero:
;__Lib_Math.c,319 :: 		
0x0055	0xEC      	MOV A, R4
;__Lib_Math.c,320 :: 		
0x0056	0xFF      	MOV R7, A
;__Lib_Math.c,321 :: 		
0x0057	0xF5F0    	MOV B, A
;__Lib_Math.c,322 :: 		
0x0059	0xE9      	MOV A, R1
;__Lib_Math.c,323 :: 		
0x005A	0x84      	DIV AB
;__Lib_Math.c,324 :: 		
0x005B	0x20D21C  	JB OV_bit, __Div_16x16_U_div_ret
;__Lib_Math.c,325 :: 		
0x005E	0xF9      	MOV R1, A
;__Lib_Math.c,326 :: 		
0x005F	0xACF0    	MOV R4, B
;__Lib_Math.c,327 :: 		
0x0061	0x75F008  	MOV B, 8
;__Lib_Math.c,329 :: 		
__Div_16x16_U_Loop2:
;__Lib_Math.c,330 :: 		
0x0064	0xE8      	MOV A, R0
;__Lib_Math.c,331 :: 		
0x0065	0x28      	ADD A, R0
;__Lib_Math.c,332 :: 		
0x0066	0xF8      	MOV R0, A
;__Lib_Math.c,333 :: 		
0x0067	0xEC      	MOV A, R4
;__Lib_Math.c,334 :: 		
0x0068	0x33      	RLC A
;__Lib_Math.c,335 :: 		
0x0069	0xFC      	MOV R4, A
;__Lib_Math.c,336 :: 		
0x006A	0x4007    	JC __Div_16x16_U_Lab2
;__Lib_Math.c,337 :: 		
0x006C	0x9F      	SUBB A, R7
;__Lib_Math.c,338 :: 		
0x006D	0x5006    	JNC __Div_16x16_U_Lab3
;__Lib_Math.c,339 :: 		
0x006F	0xD5F0F2  	DJNZ B, __Div_16x16_U_Loop2
;__Lib_Math.c,340 :: 		
0x0072	0x22      	RET
;__Lib_Math.c,342 :: 		
__Div_16x16_U_Lab2:
;__Lib_Math.c,343 :: 		
0x0073	0xC3      	CLR C
;__Lib_Math.c,344 :: 		
0x0074	0x9F      	SUBB A, R7
;__Lib_Math.c,345 :: 		
__Div_16x16_U_Lab3:
;__Lib_Math.c,346 :: 		
0x0075	0xFC      	MOV R4, A
;__Lib_Math.c,347 :: 		
0x0076	0x08      	INC R0
;__Lib_Math.c,348 :: 		
0x0077	0xD5F0EA  	DJNZ B, __Div_16x16_U_Loop2
;__Lib_Math.c,350 :: 		
__Div_16x16_U_div_ret:
;__Lib_Math.c,352 :: 		
0x007A	0x22      	RET
; end of _Div_16x16_U
___CC2D:
;__Lib_System.c,13 :: 		
;__Lib_System.c,15 :: 		
_CC2D_Loop1:
;__Lib_System.c,16 :: 		
0x007B	0xE4      	CLR A
;__Lib_System.c,17 :: 		
0x007C	0x93      	MOVC A, @A+DPTR
;__Lib_System.c,18 :: 		
0x007D	0xF6      	MOV @R0, A
;__Lib_System.c,19 :: 		
0x007E	0x08      	INC R0
;__Lib_System.c,20 :: 		
0x007F	0xA3      	INC DPTR
;__Lib_System.c,21 :: 		
0x0080	0xD9F9    	DJNZ R1, _CC2D_Loop1
;__Lib_System.c,23 :: 		
0x0082	0x22      	RET
; end of ___CC2D
_Timer0InterruptHandler:
0x0083	0xC000    	PUSH R0
0x0085	0xC001    	PUSH R1
0x0087	0xC002    	PUSH R2
0x0089	0xC003    	PUSH R3
0x008B	0xC004    	PUSH R4
0x008D	0xC005    	PUSH R5
0x008F	0xC007    	PUSH R7
0x0091	0xC0D0    	PUSH PSW
0x0093	0xC0E0    	PUSH ACC
0x0095	0xC0F0    	PUSH B
0x0097	0xC082    	PUSH DP0L
0x0099	0xC083    	PUSH DP0H
;BTH3_1.c,6 :: 		void Timer0InterruptHandler() org IVT_ADDR_ET0 // xu ly ngat timer 0 ;ET0 dia chi ngat danh cho timer 0 0x000B
;BTH3_1.c,8 :: 		TR0_bit = 0;     // Dung Timer 0 tam thoi
0x009B	0xC28C    	CLR TR0_bit
;BTH3_1.c,9 :: 		TH0 = 0xFC;     // luu tru 8 bit cao cua gia tri timer 0
0x009D	0x758CFC  	MOV TH0, #252
;BTH3_1.c,10 :: 		TL0 = 0x18;      // luu tru 8 bit thap cua gia tri timer 0
0x00A0	0x758A18  	MOV TL0, #24
;BTH3_1.c,11 :: 		TR0_bit = 1;  // kich hoat timer cho timer bat dau dem
0x00A3	0xD28C    	SETB TR0_bit
;BTH3_1.c,12 :: 		count++;         // moi lan timer ngat bien count sex tang len 1 don vi
0x00A5	0x7401    	MOV A, #1
0x00A7	0x2546    	ADD A, _count
0x00A9	0xF546    	MOV _count, A
0x00AB	0x7400    	MOV A, #0
0x00AD	0x3547    	ADDC A, _count+1
0x00AF	0xF547    	MOV _count+1, A
;BTH3_1.c,14 :: 		if (count % 2 == 0) // neu count chia het cho 2( la so chan) thuc thi cac lenh ben trong
0x00B1	0x7401    	MOV A, #1
0x00B3	0x5546    	ANL A, _count
0x00B5	0xF9      	MOV R1, A
0x00B6	0x7400    	MOV A, #0
0x00B8	0x5547    	ANL A, _count+1
0x00BA	0xFA      	MOV R2, A
0x00BB	0xE9      	MOV A, R1
0x00BC	0x4A      	ORL A, R2
0x00BD	0x7035    	JNZ L_Timer0InterruptHandler0
;BTH3_1.c,16 :: 		P0 = 0xFF;   // xuat gia tri 0 xFF ra cong P0
0x00BF	0x7580FF  	MOV P0, #255
;BTH3_1.c,17 :: 		P1 &= 0xF0;  // xuat gia tri 0xF0 ra cong P1 va giu nguyen 4 bit cao va dat 4 bit thap bang 0
0x00C2	0x5390F0  	ANL P1, #240
;BTH3_1.c,18 :: 		P0 = digits_array[digits_array_index];      // ghi gia tri ma hoa  cua chu so hien tai len cong P0
0x00C5	0x7408    	MOV A, lo_addr(_digits_array)
0x00C7	0x250E    	ADD A, _digits_array_index
0x00C9	0xF8      	MOV R0, A
0x00CA	0x8680    	MOV P0, @R0
;BTH3_1.c,19 :: 		P1 |= shifter; // giu nguyen bit hien tai tren P1 bat cac bit duoc chi dinh trong shifter
0x00CC	0xE50F    	MOV A, _shifter
0x00CE	0x4290    	ORL P1, A
;BTH3_1.c,21 :: 		shifter <<= 1;  // Dich gia tri cua shifter sang trai 1 bit
0x00D0	0x7801    	MOV R0, #1
0x00D2	0xE50F    	MOV A, _shifter
0x00D4	0x08      	INC R0
0x00D5	0x8002    	SJMP L__Timer0InterruptHandler9
L__Timer0InterruptHandler10:
0x00D7	0xC3      	CLR C
0x00D8	0x33      	RLC A
L__Timer0InterruptHandler9:
0x00D9	0xD8FC    	DJNZ R0, L__Timer0InterruptHandler10
0x00DB	0xF9      	MOV R1, A
0x00DC	0x85010F  	MOV _shifter, 1
;BTH3_1.c,22 :: 		if (shifter > 8u)    // neu shifter dich lon hon 8 dat shifter ve bang 1
0x00DF	0xD3      	SETB C
0x00E0	0xE9      	MOV A, R1
0x00E1	0x9408    	SUBB A, #8
0x00E3	0x4003    	JC L_Timer0InterruptHandler1
;BTH3_1.c,23 :: 		shifter = 1;
0x00E5	0x750F01  	MOV _shifter, #1
L_Timer0InterruptHandler1:
;BTH3_1.c,24 :: 		digits_array_index++;  //tang chu so hien tai len 1, chuyen sang so ke tiep trong mang
0x00E8	0x050E    	INC _digits_array_index
;BTH3_1.c,25 :: 		if (digits_array_index > 3u)    // kiem tra neu vuot qua 3 gia tri dat lai ve 0
0x00EA	0xD3      	SETB C
0x00EB	0xE50E    	MOV A, _digits_array_index
0x00ED	0x9403    	SUBB A, #3
0x00EF	0x4003    	JC L_Timer0InterruptHandler2
;BTH3_1.c,26 :: 		digits_array_index = 0;
0x00F1	0x750E00  	MOV _digits_array_index, #0
L_Timer0InterruptHandler2:
;BTH3_1.c,27 :: 		}
L_Timer0InterruptHandler0:
;BTH3_1.c,29 :: 		if (count == 5)
0x00F4	0x7405    	MOV A, #5
0x00F6	0x6546    	XRL A, _count
0x00F8	0x7004    	JNZ L__Timer0InterruptHandler11
0x00FA	0x7400    	MOV A, #0
0x00FC	0x6547    	XRL A, _count+1
L__Timer0InterruptHandler11:
0x00FE	0x6002    	JZ #2
0x0100	0x21EE    	AJMP L_Timer0InterruptHandler3
;BTH3_1.c,31 :: 		count = 0;
0x0102	0x754600  	MOV _count, #0
0x0105	0x754700  	MOV _count+1, #0
;BTH3_1.c,32 :: 		giay++;
0x0108	0x7401    	MOV A, #1
0x010A	0x254A    	ADD A, _giay
0x010C	0xF54A    	MOV _giay, A
0x010E	0x7400    	MOV A, #0
0x0110	0x354B    	ADDC A, _giay+1
0x0112	0xF54B    	MOV _giay+1, A
;BTH3_1.c,33 :: 		if (giay == 60) {
0x0114	0x743C    	MOV A, #60
0x0116	0x654A    	XRL A, _giay
0x0118	0x7004    	JNZ L__Timer0InterruptHandler12
0x011A	0x7400    	MOV A, #0
0x011C	0x654B    	XRL A, _giay+1
L__Timer0InterruptHandler12:
0x011E	0x7042    	JNZ L_Timer0InterruptHandler4
;BTH3_1.c,34 :: 		phut++;
0x0120	0x7401    	MOV A, #1
0x0122	0x2544    	ADD A, _phut
0x0124	0xF544    	MOV _phut, A
0x0126	0x7400    	MOV A, #0
0x0128	0x3545    	ADDC A, _phut+1
0x012A	0xF545    	MOV _phut+1, A
;BTH3_1.c,35 :: 		giay = 0;
0x012C	0x754A00  	MOV _giay, #0
0x012F	0x754B00  	MOV _giay+1, #0
;BTH3_1.c,36 :: 		if (phut == 60) {
0x0132	0x743C    	MOV A, #60
0x0134	0x6544    	XRL A, _phut
0x0136	0x7004    	JNZ L__Timer0InterruptHandler13
0x0138	0x7400    	MOV A, #0
0x013A	0x6545    	XRL A, _phut+1
L__Timer0InterruptHandler13:
0x013C	0x7024    	JNZ L_Timer0InterruptHandler5
;BTH3_1.c,37 :: 		gio++;
0x013E	0x7401    	MOV A, #1
0x0140	0x2548    	ADD A, _gio
0x0142	0xF548    	MOV _gio, A
0x0144	0x7400    	MOV A, #0
0x0146	0x3549    	ADDC A, _gio+1
0x0148	0xF549    	MOV _gio+1, A
;BTH3_1.c,38 :: 		phut = 0;
0x014A	0x754400  	MOV _phut, #0
0x014D	0x754500  	MOV _phut+1, #0
;BTH3_1.c,39 :: 		if (gio == 24) {
0x0150	0x7418    	MOV A, #24
0x0152	0x6548    	XRL A, _gio
0x0154	0x7004    	JNZ L__Timer0InterruptHandler14
0x0156	0x7400    	MOV A, #0
0x0158	0x6549    	XRL A, _gio+1
L__Timer0InterruptHandler14:
0x015A	0x7006    	JNZ L_Timer0InterruptHandler6
;BTH3_1.c,40 :: 		gio = 0;
0x015C	0x754800  	MOV _gio, #0
0x015F	0x754900  	MOV _gio+1, #0
;BTH3_1.c,41 :: 		}
L_Timer0InterruptHandler6:
;BTH3_1.c,42 :: 		}
L_Timer0InterruptHandler5:
;BTH3_1.c,43 :: 		}
L_Timer0InterruptHandler4:
;BTH3_1.c,44 :: 		digit = gio / 10; // chia gio cho 10 de lay chu so hang chuc
0x0162	0x7C0A    	MOV R4, #10
0x0164	0x7D00    	MOV R5, #0
0x0166	0xA848    	MOV R0, _gio
0x0168	0xA949    	MOV R1, _gio+1
0x016A	0x1126    	ACALL _Div_16x16_U
0x016C	0x85000C  	MOV _digit, 0
0x016F	0x85010D  	MOV _digit+1, 1
;BTH3_1.c,45 :: 		digits_array[3] = mask[digit];    // luu chu so hang chuc cua gio vao phan tu thu 3 cua mang
0x0172	0x7B01    	MOV R3, #1
0x0174	0xE8      	MOV A, R0
0x0175	0x0B      	INC R3
0x0176	0x8002    	SJMP L__Timer0InterruptHandler15
L__Timer0InterruptHandler16:
0x0178	0xC3      	CLR C
0x0179	0x33      	RLC A
L__Timer0InterruptHandler15:
0x017A	0xDBFC    	DJNZ R3, L__Timer0InterruptHandler16
0x017C	0xFA      	MOV R2, A
0x017D	0x7430    	MOV A, lo_addr(_mask)
0x017F	0x2A      	ADD A, R2
0x0180	0xF8      	MOV R0, A
0x0181	0x860B    	MOV _digits_array+3, @R0
;BTH3_1.c,46 :: 		digit = gio % 10; //   chia lay du cho 10 de lay chu so hang don vi
0x0183	0x7C0A    	MOV R4, #10
0x0185	0x7D00    	MOV R5, #0
0x0187	0xA848    	MOV R0, _gio
0x0189	0xA949    	MOV R1, _gio+1
0x018B	0x1126    	ACALL _Div_16x16_U
0x018D	0xA804    	MOV R0, R4
0x018F	0xA905    	MOV R1, R5
0x0191	0x85000C  	MOV _digit, 0
0x0194	0x85010D  	MOV _digit+1, 1
;BTH3_1.c,47 :: 		digits_array[2] = mask[digit];   // luu chu so hang don vi vao phan tu thu 2 cua mang
0x0197	0x7B01    	MOV R3, #1
0x0199	0xE8      	MOV A, R0
0x019A	0x0B      	INC R3
0x019B	0x8002    	SJMP L__Timer0InterruptHandler17
L__Timer0InterruptHandler18:
0x019D	0xC3      	CLR C
0x019E	0x33      	RLC A
L__Timer0InterruptHandler17:
0x019F	0xDBFC    	DJNZ R3, L__Timer0InterruptHandler18
0x01A1	0xFA      	MOV R2, A
0x01A2	0x7430    	MOV A, lo_addr(_mask)
0x01A4	0x2A      	ADD A, R2
0x01A5	0xF8      	MOV R0, A
0x01A6	0x860A    	MOV _digits_array+2, @R0
;BTH3_1.c,48 :: 		digit = phut / 10;          //    chia phut cho 10 de lay chu so hang chuc
0x01A8	0x7C0A    	MOV R4, #10
0x01AA	0x7D00    	MOV R5, #0
0x01AC	0xA844    	MOV R0, _phut
0x01AE	0xA945    	MOV R1, _phut+1
0x01B0	0x1126    	ACALL _Div_16x16_U
0x01B2	0x85000C  	MOV _digit, 0
0x01B5	0x85010D  	MOV _digit+1, 1
;BTH3_1.c,49 :: 		digits_array[1] = mask[digit];    //luu chu so hang chuc cua phut vao phan tu thu 1 cua mang
0x01B8	0x7B01    	MOV R3, #1
0x01BA	0xE8      	MOV A, R0
0x01BB	0x0B      	INC R3
0x01BC	0x8002    	SJMP L__Timer0InterruptHandler19
L__Timer0InterruptHandler20:
0x01BE	0xC3      	CLR C
0x01BF	0x33      	RLC A
L__Timer0InterruptHandler19:
0x01C0	0xDBFC    	DJNZ R3, L__Timer0InterruptHandler20
0x01C2	0xFA      	MOV R2, A
0x01C3	0x7430    	MOV A, lo_addr(_mask)
0x01C5	0x2A      	ADD A, R2
0x01C6	0xF8      	MOV R0, A
0x01C7	0x8609    	MOV _digits_array+1, @R0
;BTH3_1.c,50 :: 		digit = phut % 10; //   chia lay du cho 10 de lay chu so hang don vi phut
0x01C9	0x7C0A    	MOV R4, #10
0x01CB	0x7D00    	MOV R5, #0
0x01CD	0xA844    	MOV R0, _phut
0x01CF	0xA945    	MOV R1, _phut+1
0x01D1	0x1126    	ACALL _Div_16x16_U
0x01D3	0xA804    	MOV R0, R4
0x01D5	0xA905    	MOV R1, R5
0x01D7	0x85000C  	MOV _digit, 0
0x01DA	0x85010D  	MOV _digit+1, 1
;BTH3_1.c,51 :: 		digits_array[0] = mask[digit];    //  luu chu so hang don vi vao phan tu thu 0 cua mang
0x01DD	0x7B01    	MOV R3, #1
0x01DF	0xE8      	MOV A, R0
0x01E0	0x0B      	INC R3
0x01E1	0x8002    	SJMP L__Timer0InterruptHandler21
L__Timer0InterruptHandler22:
0x01E3	0xC3      	CLR C
0x01E4	0x33      	RLC A
L__Timer0InterruptHandler21:
0x01E5	0xDBFC    	DJNZ R3, L__Timer0InterruptHandler22
0x01E7	0xFA      	MOV R2, A
0x01E8	0x7430    	MOV A, lo_addr(_mask)
0x01EA	0x2A      	ADD A, R2
0x01EB	0xF8      	MOV R0, A
0x01EC	0x8608    	MOV _digits_array, @R0
;BTH3_1.c,52 :: 		}
L_Timer0InterruptHandler3:
;BTH3_1.c,53 :: 		}
0x01EE	0xD083    	POP DP0H
0x01F0	0xD082    	POP DP0L
0x01F2	0xD0F0    	POP B
0x01F4	0xD0E0    	POP ACC
0x01F6	0xD0D0    	POP PSW
0x01F8	0xD007    	POP R7
0x01FA	0xD005    	POP R5
0x01FC	0xD004    	POP R4
0x01FE	0xD003    	POP R3
0x0200	0xD002    	POP R2
0x0202	0xD001    	POP R1
0x0204	0xD000    	POP R0
0x0206	0x32      	RETI
; end of _Timer0InterruptHandler
_main:
0x0207	0x75814C  	MOV SP, #76
0x020A	0x1202D3  	LCALL 723
;BTH3_1.c,54 :: 		void main() {
;BTH3_1.c,55 :: 		TMOD = 0x01;    // Timer 0 duoc thiet lap o che do 16 bit
0x020D	0x758901  	MOV TMOD, #1
;BTH3_1.c,56 :: 		TH0 = 0xFC;   //luu tru 8 bit cao cua timer 0
0x0210	0x758CFC  	MOV TH0, #252
;BTH3_1.c,57 :: 		TL0 = 0x18;   // luu tru 8 bit thap cua timer 0
0x0213	0x758A18  	MOV TL0, #24
;BTH3_1.c,58 :: 		IE = 0x82;    // thiet lap cac bit trong thanh ghi IE de kich hoat timer 0
0x0216	0x75A882  	MOV IE, #130
;BTH3_1.c,59 :: 		TR0_bit = 1; // cho phep timer 0 bat dau dem
0x0219	0xD28C    	SETB TR0_bit
;BTH3_1.c,60 :: 		P0 = 0xFF;   // xuat gia tri 0 xFF ra cong P0
0x021B	0x7580FF  	MOV P0, #255
;BTH3_1.c,61 :: 		P1 &= 0xF0;   // xuat gia tri 0xF0 ra cong P1 va giu nguyen 4 bit cao va dat 4 bit thap bang 0
0x021E	0x5390F0  	ANL P1, #240
;BTH3_1.c,62 :: 		digits_array_index = 0;   // thiet lap mang gia tri ban dau la 0
0x0221	0x750E00  	MOV _digits_array_index, #0
;BTH3_1.c,63 :: 		shifter = 1;     // bat dau tu chu so dau tien
0x0224	0x750F01  	MOV _shifter, #1
;BTH3_1.c,64 :: 		digit = gio / 10;  //   chia gio cho 10 de lay chu so hang chuc
0x0227	0x7C0A    	MOV R4, #10
0x0229	0x7D00    	MOV R5, #0
0x022B	0xA848    	MOV R0, _gio
0x022D	0xA949    	MOV R1, _gio+1
0x022F	0x1126    	ACALL _Div_16x16_U
0x0231	0x85000C  	MOV _digit, 0
0x0234	0x85010D  	MOV _digit+1, 1
;BTH3_1.c,65 :: 		digits_array[3] = mask[digit];     // luu chu so hang chuc cua gio vao phan tu thu 3 cua mang
0x0237	0x7B01    	MOV R3, #1
0x0239	0xE8      	MOV A, R0
0x023A	0x0B      	INC R3
0x023B	0x8002    	SJMP L__main23
L__main24:
0x023D	0xC3      	CLR C
0x023E	0x33      	RLC A
L__main23:
0x023F	0xDBFC    	DJNZ R3, L__main24
0x0241	0xFA      	MOV R2, A
0x0242	0x7430    	MOV A, lo_addr(_mask)
0x0244	0x2A      	ADD A, R2
0x0245	0xF8      	MOV R0, A
0x0246	0x860B    	MOV _digits_array+3, @R0
;BTH3_1.c,66 :: 		digit = gio % 10;        //chia lay du cho 10 de lay chu so hang don vi
0x0248	0x7C0A    	MOV R4, #10
0x024A	0x7D00    	MOV R5, #0
0x024C	0xA848    	MOV R0, _gio
0x024E	0xA949    	MOV R1, _gio+1
0x0250	0x1126    	ACALL _Div_16x16_U
0x0252	0xA804    	MOV R0, R4
0x0254	0xA905    	MOV R1, R5
0x0256	0x85000C  	MOV _digit, 0
0x0259	0x85010D  	MOV _digit+1, 1
;BTH3_1.c,67 :: 		digits_array[2] = mask[digit];
0x025C	0x7B01    	MOV R3, #1
0x025E	0xE8      	MOV A, R0
0x025F	0x0B      	INC R3
0x0260	0x8002    	SJMP L__main25
L__main26:
0x0262	0xC3      	CLR C
0x0263	0x33      	RLC A
L__main25:
0x0264	0xDBFC    	DJNZ R3, L__main26
0x0266	0xFA      	MOV R2, A
0x0267	0x7430    	MOV A, lo_addr(_mask)
0x0269	0x2A      	ADD A, R2
0x026A	0xF8      	MOV R0, A
0x026B	0x860A    	MOV _digits_array+2, @R0
;BTH3_1.c,68 :: 		digit = phut / 10;
0x026D	0x7C0A    	MOV R4, #10
0x026F	0x7D00    	MOV R5, #0
0x0271	0xA844    	MOV R0, _phut
0x0273	0xA945    	MOV R1, _phut+1
0x0275	0x1126    	ACALL _Div_16x16_U
0x0277	0x85000C  	MOV _digit, 0
0x027A	0x85010D  	MOV _digit+1, 1
;BTH3_1.c,69 :: 		digits_array[1] = mask[digit];
0x027D	0x7B01    	MOV R3, #1
0x027F	0xE8      	MOV A, R0
0x0280	0x0B      	INC R3
0x0281	0x8002    	SJMP L__main27
L__main28:
0x0283	0xC3      	CLR C
0x0284	0x33      	RLC A
L__main27:
0x0285	0xDBFC    	DJNZ R3, L__main28
0x0287	0xFA      	MOV R2, A
0x0288	0x7430    	MOV A, lo_addr(_mask)
0x028A	0x2A      	ADD A, R2
0x028B	0xF8      	MOV R0, A
0x028C	0x8609    	MOV _digits_array+1, @R0
;BTH3_1.c,70 :: 		digit = phut % 10;
0x028E	0x7C0A    	MOV R4, #10
0x0290	0x7D00    	MOV R5, #0
0x0292	0xA844    	MOV R0, _phut
0x0294	0xA945    	MOV R1, _phut+1
0x0296	0x1126    	ACALL _Div_16x16_U
0x0298	0xA804    	MOV R0, R4
0x029A	0xA905    	MOV R1, R5
0x029C	0x85000C  	MOV _digit, 0
0x029F	0x85010D  	MOV _digit+1, 1
;BTH3_1.c,71 :: 		digits_array[0] = mask[digit];
0x02A2	0x7B01    	MOV R3, #1
0x02A4	0xE8      	MOV A, R0
0x02A5	0x0B      	INC R3
0x02A6	0x8002    	SJMP L__main29
L__main30:
0x02A8	0xC3      	CLR C
0x02A9	0x33      	RLC A
L__main29:
0x02AA	0xDBFC    	DJNZ R3, L__main30
0x02AC	0xFA      	MOV R2, A
0x02AD	0x7430    	MOV A, lo_addr(_mask)
0x02AF	0x2A      	ADD A, R2
0x02B0	0xF8      	MOV R0, A
0x02B1	0x8608    	MOV _digits_array, @R0
;BTH3_1.c,72 :: 		while (1) {
L_main7:
;BTH3_1.c,73 :: 		}
0x02B3	0x80FE    	SJMP L_main7
;BTH3_1.c,74 :: 		}
0x02B5	0x80FE    	SJMP #254
; end of _main
0x02D3	0x7830    	MOV R0, 48
0x02D5	0x791C    	MOV R1, 28
0x02D7	0x7582B7  	MOV DP0L, 183
0x02DA	0x758302  	MOV DP0H, 2
0x02DD	0x12007B  	LCALL 123
0x02E0	0x22      	RET
;BTH3_1.c,0 :: ?ICS_mask
0x02B7	0xC000F9 ;?ICS_mask+0
0x02BA	0x00A400 ;?ICS_mask+3
0x02BD	0xB00099 ;?ICS_mask+6
0x02C0	0x009200 ;?ICS_mask+9
0x02C3	0x8200F8 ;?ICS_mask+12
0x02C6	0x008000 ;?ICS_mask+15
0x02C9	0x9000 ;?ICS_mask+18
; end of ?ICS_mask
;BTH3_1.c,0 :: ?ICS_phut
0x02CB	0x2800 ;?ICS_phut+0
; end of ?ICS_phut
;BTH3_1.c,0 :: ?ICS_count
0x02CD	0x0000 ;?ICS_count+0
; end of ?ICS_count
;BTH3_1.c,0 :: ?ICS_gio
0x02CF	0x1500 ;?ICS_gio+0
; end of ?ICS_gio
;BTH3_1.c,0 :: ?ICS_giay
0x02D1	0x3700 ;?ICS_giay+0
; end of ?ICS_giay
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0026      [85]    _Div_16x16_U
0x007B       [8]    ___CC2D
0x0083     [388]    _Timer0InterruptHandler
0x0207     [176]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0001       [1]    R1
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [4]    _digits_array
0x000C       [2]    _digit
0x000E       [1]    _digits_array_index
0x000F       [1]    _shifter
0x0030      [20]    _mask
0x0044       [2]    _phut
0x0046       [2]    _count
0x0048       [2]    _gio
0x004A       [2]    _giay
0x0080       [1]    P0
0x0081       [1]    SP
0x0082       [1]    DPL
0x0083       [1]    DPH
0x0088       [0]    TR0_bit
0x0089       [1]    TMOD
0x008A       [1]    TL0
0x008C       [1]    TH0
0x0090       [1]    P1
0x00A8       [1]    IE
0x00D0       [1]    PSW
0x00D0       [0]    OV_bit
0x00E0       [1]    ACC
0x00F0       [1]    B
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x02B7      [20]    ?ICS_mask
0x02CB       [2]    ?ICS_phut
0x02CD       [2]    ?ICS_count
0x02CF       [2]    ?ICS_gio
0x02D1       [2]    ?ICS_giay
//** Label List: ** 
//----------------------------------------------
  L_Timer0InterruptHandler0
  L_Timer0InterruptHandler1
  L_Timer0InterruptHandler2
  L_Timer0InterruptHandler3
  L_Timer0InterruptHandler4
  L_Timer0InterruptHandler5
  L_Timer0InterruptHandler6
  L_main7
  L_main8
  _Timer0InterruptHandler
  L__Timer0InterruptHandler9
  L__Timer0InterruptHandler10
  L__Timer0InterruptHandler11
  L__Timer0InterruptHandler12
  L__Timer0InterruptHandler13
  L__Timer0InterruptHandler14
  L__Timer0InterruptHandler15
  L__Timer0InterruptHandler16
  L__Timer0InterruptHandler17
  L__Timer0InterruptHandler18
  L__Timer0InterruptHandler19
  L__Timer0InterruptHandler20
  L__Timer0InterruptHandler21
  L__Timer0InterruptHandler22
  _main
  L__main23
  L__main24
  L__main25
  L__main26
  L__main27
  L__main28
  L__main29
  L__main30
  lab_end
  loop_lab
  lab_end1
  lab_loop1
  lab_end2
  lab_loop3
  __Div_8x8_S_Bpositive
  __Div_8x8_S_Apositive
  __Div_8x8_S_Skip_Div
  __Div_8x8_S_div_ret
  __op2hi_not_zero
  __op1hi_not_zero
  __Div_16x16_U_Loop1
  __Div_16x16_U_Lab1
  __Div_16x16_U_div_ret
  __Div_16x16_U_Loop2
  __Div_16x16_U_Lab2
  __Div_16x16_U_Lab3
  __Div_16x16_S_op2hipositive
  __Div_16x16_S_op1hipositive
  __Div_16x16_S_Skip_Udiv
  __Div_16x16_S_div_ret
  __Div_32x32_U_start
  __Div_32x32_U_aux
  __Div_32x32_U_l2
  __Div_32x32_U_l1
  lw_1
  lw_2
  __Div_32x32_U_l3
  lw_3
  __Div_32x32_U_l4
  __Div_32x32_U_IR_l0
  __Div_32x32_U_l5
  __Div_32x32_U_l6
  __Div_32x32_U_l8
  __Div_32x32_U_l7
  __Div_32x32_U_IR_l1
  __Div_32x32_U_l10
  __Div_32x32_U_l9
  __Div_32x32_U_IR_l2
  __Div_32x32_S_l1
  __Div_32x32_S_call_uns
  __Div_32x32_S_l2
  __Div_32x32_S_l3
  __Div_32x32_S_div_ret
  __shl_long
  __shr_longint
  __shr_longword
  _Mul_16x16
  _Mul_32x32
  _Div_8x8_S
  _Div_16x16_U
  _Div_16x16_S
  _Div_32x32_U
  _Div_32x32_S
  _CC2D_Loop1
  _CC2PD_Loop1
  _CC2XD_Loop1
  ___DoIFC
  ___CC2D
  ___CC2PD
  ___CC2XD
  L_Timer0InterruptHandler0
  L_Timer0InterruptHandler1
  L_Timer0InterruptHandler2
  L_Timer0InterruptHandler3
  L_Timer0InterruptHandler4
  L_Timer0InterruptHandler5
  L_Timer0InterruptHandler6
  L_main7
  L_main8
  _Timer0InterruptHandler
  L__Timer0InterruptHandler9
  L__Timer0InterruptHandler10
  L__Timer0InterruptHandler11
  L__Timer0InterruptHandler12
  L__Timer0InterruptHandler13
  L__Timer0InterruptHandler14
  L__Timer0InterruptHandler15
  L__Timer0InterruptHandler16
  L__Timer0InterruptHandler17
  L__Timer0InterruptHandler18
  L__Timer0InterruptHandler19
  L__Timer0InterruptHandler20
  L__Timer0InterruptHandler21
  L__Timer0InterruptHandler22
  _main
  L__main23
  L__main24
  L__main25
  L__main26
  L__main27
  L__main28
  L__main29
  L__main30
