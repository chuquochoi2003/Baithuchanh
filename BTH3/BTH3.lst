;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 17/12/2024 16:33:15
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x0200DE  	LJMP 222
0x0003	0x020000  	LJMP 0
0x0006	0x00      	NOP
0x0007	0x00      	NOP
0x0008	0x00      	NOP
0x0009	0x00      	NOP
0x000A	0x00      	NOP
0x000B	0x020000  	LJMP 0
0x000E	0x00      	NOP
0x000F	0x00      	NOP
0x0010	0x00      	NOP
0x0011	0x00      	NOP
0x0012	0x00      	NOP
0x0013	0x020000  	LJMP 0
0x0016	0x00      	NOP
0x0017	0x00      	NOP
0x0018	0x00      	NOP
0x0019	0x00      	NOP
0x001A	0x00      	NOP
0x001B	0x020000  	LJMP 0
0x001E	0x00      	NOP
0x001F	0x00      	NOP
0x0020	0x00      	NOP
0x0021	0x00      	NOP
0x0022	0x00      	NOP
0x0023	0x020000  	LJMP 0
_Div_16x16_U:
;__Lib_Math.c,273 :: 		
;__Lib_Math.c,275 :: 		
0x0026	0xBD000B  	CJNE R5, 0, __op2hi_not_zero
;__Lib_Math.c,276 :: 		
0x0029	0xB90029  	CJNE R1, 0, __op1hi_not_zero
;__Lib_Math.c,277 :: 		
0x002C	0xE8      	MOV A, R0
;__Lib_Math.c,278 :: 		
0x002D	0x8CF0    	MOV B, R4
;__Lib_Math.c,279 :: 		
0x002F	0x84      	DIV AB
;__Lib_Math.c,280 :: 		
0x0030	0xF8      	MOV R0, A
;__Lib_Math.c,281 :: 		
0x0031	0xACF0    	MOV R4, B
;__Lib_Math.c,282 :: 		
0x0033	0x22      	RET
;__Lib_Math.c,284 :: 		
__op2hi_not_zero:
;__Lib_Math.c,285 :: 		
0x0034	0xE4      	CLR A
;__Lib_Math.c,286 :: 		
0x0035	0xCD      	XCH A, R5
;__Lib_Math.c,287 :: 		
0x0036	0xFF      	MOV R7, A
;__Lib_Math.c,288 :: 		
0x0037	0x75F008  	MOV B, 8
;__Lib_Math.c,290 :: 		
__Div_16x16_U_Loop1:
;__Lib_Math.c,291 :: 		
0x003A	0xE8      	MOV A, R0
;__Lib_Math.c,292 :: 		
0x003B	0x28      	ADD A, R0
;__Lib_Math.c,293 :: 		
0x003C	0xF8      	MOV R0, A
;__Lib_Math.c,294 :: 		
0x003D	0xE9      	MOV A, R1
;__Lib_Math.c,295 :: 		
0x003E	0x33      	RLC A
;__Lib_Math.c,296 :: 		
0x003F	0xF9      	MOV R1, A
;__Lib_Math.c,297 :: 		
0x0040	0xED      	MOV A, R5
;__Lib_Math.c,298 :: 		
0x0041	0x33      	RLC A
;__Lib_Math.c,299 :: 		
0x0042	0xFD      	MOV R5, A
;__Lib_Math.c,300 :: 		
0x0043	0xE9      	MOV A, R1
;__Lib_Math.c,301 :: 		
0x0044	0x9C      	SUBB A, R4
;__Lib_Math.c,302 :: 		
0x0045	0xED      	MOV A, R5
;__Lib_Math.c,303 :: 		
0x0046	0x9F      	SUBB A, R7
;__Lib_Math.c,304 :: 		
0x0047	0x4005    	JC __Div_16x16_U_Lab1
;__Lib_Math.c,305 :: 		
0x0049	0xFD      	MOV R5, A
;__Lib_Math.c,306 :: 		
0x004A	0xE9      	MOV A, R1
;__Lib_Math.c,307 :: 		
0x004B	0x9C      	SUBB A, R4
;__Lib_Math.c,308 :: 		
0x004C	0xF9      	MOV R1, A
;__Lib_Math.c,309 :: 		
0x004D	0x08      	INC R0
;__Lib_Math.c,311 :: 		
__Div_16x16_U_Lab1:
;__Lib_Math.c,312 :: 		
0x004E	0xD5F0E9  	DJNZ B, __Div_16x16_U_Loop1
;__Lib_Math.c,313 :: 		
0x0051	0xE4      	CLR A
;__Lib_Math.c,314 :: 		
0x0052	0xC9      	XCH A, R1
;__Lib_Math.c,315 :: 		
0x0053	0xFC      	MOV R4, A
;__Lib_Math.c,316 :: 		
0x0054	0x22      	RET
;__Lib_Math.c,318 :: 		
__op1hi_not_zero:
;__Lib_Math.c,319 :: 		
0x0055	0xEC      	MOV A, R4
;__Lib_Math.c,320 :: 		
0x0056	0xFF      	MOV R7, A
;__Lib_Math.c,321 :: 		
0x0057	0xF5F0    	MOV B, A
;__Lib_Math.c,322 :: 		
0x0059	0xE9      	MOV A, R1
;__Lib_Math.c,323 :: 		
0x005A	0x84      	DIV AB
;__Lib_Math.c,324 :: 		
0x005B	0x20D21C  	JB OV_bit, __Div_16x16_U_div_ret
;__Lib_Math.c,325 :: 		
0x005E	0xF9      	MOV R1, A
;__Lib_Math.c,326 :: 		
0x005F	0xACF0    	MOV R4, B
;__Lib_Math.c,327 :: 		
0x0061	0x75F008  	MOV B, 8
;__Lib_Math.c,329 :: 		
__Div_16x16_U_Loop2:
;__Lib_Math.c,330 :: 		
0x0064	0xE8      	MOV A, R0
;__Lib_Math.c,331 :: 		
0x0065	0x28      	ADD A, R0
;__Lib_Math.c,332 :: 		
0x0066	0xF8      	MOV R0, A
;__Lib_Math.c,333 :: 		
0x0067	0xEC      	MOV A, R4
;__Lib_Math.c,334 :: 		
0x0068	0x33      	RLC A
;__Lib_Math.c,335 :: 		
0x0069	0xFC      	MOV R4, A
;__Lib_Math.c,336 :: 		
0x006A	0x4007    	JC __Div_16x16_U_Lab2
;__Lib_Math.c,337 :: 		
0x006C	0x9F      	SUBB A, R7
;__Lib_Math.c,338 :: 		
0x006D	0x5006    	JNC __Div_16x16_U_Lab3
;__Lib_Math.c,339 :: 		
0x006F	0xD5F0F2  	DJNZ B, __Div_16x16_U_Loop2
;__Lib_Math.c,340 :: 		
0x0072	0x22      	RET
;__Lib_Math.c,342 :: 		
__Div_16x16_U_Lab2:
;__Lib_Math.c,343 :: 		
0x0073	0xC3      	CLR C
;__Lib_Math.c,344 :: 		
0x0074	0x9F      	SUBB A, R7
;__Lib_Math.c,345 :: 		
__Div_16x16_U_Lab3:
;__Lib_Math.c,346 :: 		
0x0075	0xFC      	MOV R4, A
;__Lib_Math.c,347 :: 		
0x0076	0x08      	INC R0
;__Lib_Math.c,348 :: 		
0x0077	0xD5F0EA  	DJNZ B, __Div_16x16_U_Loop2
;__Lib_Math.c,350 :: 		
__Div_16x16_U_div_ret:
;__Lib_Math.c,352 :: 		
0x007A	0x22      	RET
; end of _Div_16x16_U
_mask:
;BTH3.c,6 :: 		unsigned short mask(unsigned short num) {
;BTH3.c,7 :: 		switch (num) {
0x007B	0x801E    	SJMP L_mask0
;BTH3.c,8 :: 		case 0 : return 0xC0;
L_mask2:
0x007D	0x78C0    	MOV R0, #192
0x007F	0x22      	RET
;BTH3.c,9 :: 		case 1 : return 0xF9;
L_mask3:
0x0080	0x78F9    	MOV R0, #249
0x0082	0x22      	RET
;BTH3.c,10 :: 		case 2 : return 0xA4;
L_mask4:
0x0083	0x78A4    	MOV R0, #164
0x0085	0x22      	RET
;BTH3.c,11 :: 		case 3 : return 0xB0;
L_mask5:
0x0086	0x78B0    	MOV R0, #176
0x0088	0x22      	RET
;BTH3.c,12 :: 		case 4 : return 0x99;
L_mask6:
0x0089	0x7899    	MOV R0, #153
0x008B	0x22      	RET
;BTH3.c,13 :: 		case 5 : return 0x92;
L_mask7:
0x008C	0x7892    	MOV R0, #146
0x008E	0x22      	RET
;BTH3.c,14 :: 		case 6 : return 0x82;
L_mask8:
0x008F	0x7882    	MOV R0, #130
0x0091	0x22      	RET
;BTH3.c,15 :: 		case 7 : return 0xF8;
L_mask9:
0x0092	0x78F8    	MOV R0, #248
0x0094	0x22      	RET
;BTH3.c,16 :: 		case 8 : return 0x80;
L_mask10:
0x0095	0x7880    	MOV R0, #128
0x0097	0x22      	RET
;BTH3.c,17 :: 		case 9 : return 0x90;
L_mask11:
0x0098	0x7890    	MOV R0, #144
0x009A	0x22      	RET
;BTH3.c,18 :: 		} //case end
L_mask0:
0x009B	0xE515    	MOV A, FARG_mask_num
0x009D	0x60DE    	JZ L_mask2
0x009F	0xE515    	MOV A, FARG_mask_num
0x00A1	0x6401    	XRL A, #1
0x00A3	0x60DB    	JZ L_mask3
0x00A5	0xE515    	MOV A, FARG_mask_num
0x00A7	0x6402    	XRL A, #2
0x00A9	0x60D8    	JZ L_mask4
0x00AB	0xE515    	MOV A, FARG_mask_num
0x00AD	0x6403    	XRL A, #3
0x00AF	0x60D5    	JZ L_mask5
0x00B1	0xE515    	MOV A, FARG_mask_num
0x00B3	0x6404    	XRL A, #4
0x00B5	0x60D2    	JZ L_mask6
0x00B7	0xE515    	MOV A, FARG_mask_num
0x00B9	0x6405    	XRL A, #5
0x00BB	0x60CF    	JZ L_mask7
0x00BD	0xE515    	MOV A, FARG_mask_num
0x00BF	0x6406    	XRL A, #6
0x00C1	0x60CC    	JZ L_mask8
0x00C3	0xE515    	MOV A, FARG_mask_num
0x00C5	0x6407    	XRL A, #7
0x00C7	0x60C9    	JZ L_mask9
0x00C9	0xE515    	MOV A, FARG_mask_num
0x00CB	0x6408    	XRL A, #8
0x00CD	0x60C6    	JZ L_mask10
0x00CF	0xE515    	MOV A, FARG_mask_num
0x00D1	0x6409    	XRL A, #9
0x00D3	0x60C3    	JZ L_mask11
;BTH3.c,19 :: 		}
0x00D5	0x22      	RET
; end of _mask
___CC2D:
;__Lib_System.c,13 :: 		
;__Lib_System.c,15 :: 		
_CC2D_Loop1:
;__Lib_System.c,16 :: 		
0x00D6	0xE4      	CLR A
;__Lib_System.c,17 :: 		
0x00D7	0x93      	MOVC A, @A+DPTR
;__Lib_System.c,18 :: 		
0x00D8	0xF6      	MOV @R0, A
;__Lib_System.c,19 :: 		
0x00D9	0x08      	INC R0
;__Lib_System.c,20 :: 		
0x00DA	0xA3      	INC DPTR
;__Lib_System.c,21 :: 		
0x00DB	0xD9F9    	DJNZ R1, _CC2D_Loop1
;__Lib_System.c,23 :: 		
0x00DD	0x22      	RET
; end of ___CC2D
_main:
0x00DE	0x758116  	MOV SP, #22
;BTH3.c,21 :: 		void main() {
;BTH3.c,22 :: 		int n=0;
0x00E1	0x751300  	MOV main_n_L0, #0
0x00E4	0x751400  	MOV main_n_L0+1, #0
;BTH3.c,23 :: 		digit = 0; // initialize variables
0x00E7	0x750A00  	MOV _digit, #0
0x00EA	0x750B00  	MOV _digit+1, #0
;BTH3.c,24 :: 		i = 0;
0x00ED	0x750900  	MOV _i, #0
;BTH3.c,25 :: 		digits_array_index = 0;
0x00F0	0x750800  	MOV _digits_array_index, #0
;BTH3.c,26 :: 		shifter = 2;
0x00F3	0x751202  	MOV _shifter, #2
;BTH3.c,27 :: 		P0 = 0; // Initialize PORT0
0x00F6	0x758000  	MOV P0, #0
;BTH3.c,28 :: 		number = 6789; // some initial value
0x00F9	0x751085  	MOV _number, #133
0x00FC	0x75111A  	MOV _number+1, #26
;BTH3.c,29 :: 		do {
L_main12:
;BTH3.c,30 :: 		for(n=0;n<250;n++)
0x00FF	0x751300  	MOV main_n_L0, #0
0x0102	0x751400  	MOV main_n_L0+1, #0
L_main15:
0x0105	0xC3      	CLR C
0x0106	0xE513    	MOV A, main_n_L0
0x0108	0x94FA    	SUBB A, #250
0x010A	0x7400    	MOV A, #0
0x010C	0x6480    	XRL A, #128
0x010E	0xF8      	MOV R0, A
0x010F	0xE514    	MOV A, main_n_L0+1
0x0111	0x6480    	XRL A, #128
0x0113	0x98      	SUBB A, R0
0x0114	0x4002    	JC #2
0x0116	0x21DE    	AJMP L_main16
;BTH3.c,32 :: 		digit = number / 1000u ; // extract thousands digit
0x0118	0x7CE8    	MOV R4, #232
0x011A	0x7D03    	MOV R5, #3
0x011C	0xA810    	MOV R0, _number
0x011E	0xA911    	MOV R1, _number+1
0x0120	0x1126    	ACALL _Div_16x16_U
0x0122	0x85000A  	MOV _digit, 0
0x0125	0x85010B  	MOV _digit+1, 1
;BTH3.c,33 :: 		digits_array[3] = mask(digit); // and store it to digits array
0x0128	0x850015  	MOV FARG_mask_num, 0
0x012B	0x117B    	ACALL _mask
0x012D	0x85000F  	MOV _digits_array+3, 0
;BTH3.c,34 :: 		digit = (number / 100u) % 10u; // extract hundreds digit
0x0130	0x7C64    	MOV R4, #100
0x0132	0x7D00    	MOV R5, #0
0x0134	0xA810    	MOV R0, _number
0x0136	0xA911    	MOV R1, _number+1
0x0138	0x1126    	ACALL _Div_16x16_U
0x013A	0x7C0A    	MOV R4, #10
0x013C	0x7D00    	MOV R5, #0
0x013E	0x1126    	ACALL _Div_16x16_U
0x0140	0xA804    	MOV R0, R4
0x0142	0xA905    	MOV R1, R5
0x0144	0x85000A  	MOV _digit, 0
0x0147	0x85010B  	MOV _digit+1, 1
;BTH3.c,35 :: 		digits_array[2] = mask(digit); // and store it to digits array
0x014A	0x850015  	MOV FARG_mask_num, 0
0x014D	0x117B    	ACALL _mask
0x014F	0x85000E  	MOV _digits_array+2, 0
;BTH3.c,36 :: 		digit = (number / 10u) % 10u; // extract tens digit
0x0152	0x7C0A    	MOV R4, #10
0x0154	0x7D00    	MOV R5, #0
0x0156	0xA810    	MOV R0, _number
0x0158	0xA911    	MOV R1, _number+1
0x015A	0x1126    	ACALL _Div_16x16_U
0x015C	0x7C0A    	MOV R4, #10
0x015E	0x7D00    	MOV R5, #0
0x0160	0x1126    	ACALL _Div_16x16_U
0x0162	0xA804    	MOV R0, R4
0x0164	0xA905    	MOV R1, R5
0x0166	0x85000A  	MOV _digit, 0
0x0169	0x85010B  	MOV _digit+1, 1
;BTH3.c,37 :: 		digits_array[1] = mask(digit); // and store it to digits array
0x016C	0x850015  	MOV FARG_mask_num, 0
0x016F	0x117B    	ACALL _mask
0x0171	0x85000D  	MOV _digits_array+1, 0
;BTH3.c,38 :: 		digit = number % 10u; // extract ones digit
0x0174	0x7C0A    	MOV R4, #10
0x0176	0x7D00    	MOV R5, #0
0x0178	0xA810    	MOV R0, _number
0x017A	0xA911    	MOV R1, _number+1
0x017C	0x1126    	ACALL _Div_16x16_U
0x017E	0xA804    	MOV R0, R4
0x0180	0xA905    	MOV R1, R5
0x0182	0x85000A  	MOV _digit, 0
0x0185	0x85010B  	MOV _digit+1, 1
;BTH3.c,39 :: 		digits_array[0] = mask(digit); // and store it to digits array
0x0188	0x850015  	MOV FARG_mask_num, 0
0x018B	0x117B    	ACALL _mask
0x018D	0x85000C  	MOV _digits_array, 0
;BTH3.c,41 :: 		P0 = digits_array[0]; P1_0_bit=1; Delay_ms(1);P1_0_bit=0;
0x0190	0x850080  	MOV P0, 0
0x0193	0xD290    	SETB P1_0_bit
0x0195	0x7E02    	MOV R6, 2
0x0197	0x7F9D    	MOV R7, 157
0x0199	0xDFFE    	DJNZ R7, PC-2
0x019B	0xDEFC    	DJNZ R6, PC-4
0x019D	0x00      	NOP
0x019E	0xC290    	CLR P1_0_bit
;BTH3.c,42 :: 		P0 = digits_array[1]; P1_1_bit=1; Delay_ms(1);P1_1_bit=0;
0x01A0	0x850D80  	MOV P0, _digits_array+1
0x01A3	0xD291    	SETB P1_1_bit
0x01A5	0x7E02    	MOV R6, 2
0x01A7	0x7F9D    	MOV R7, 157
0x01A9	0xDFFE    	DJNZ R7, PC-2
0x01AB	0xDEFC    	DJNZ R6, PC-4
0x01AD	0x00      	NOP
0x01AE	0xC291    	CLR P1_1_bit
;BTH3.c,43 :: 		P0 = digits_array[2]; P1_2_bit=1; Delay_ms(1);P1_2_bit=0;
0x01B0	0x850E80  	MOV P0, _digits_array+2
0x01B3	0xD292    	SETB P1_2_bit
0x01B5	0x7E02    	MOV R6, 2
0x01B7	0x7F9D    	MOV R7, 157
0x01B9	0xDFFE    	DJNZ R7, PC-2
0x01BB	0xDEFC    	DJNZ R6, PC-4
0x01BD	0x00      	NOP
0x01BE	0xC292    	CLR P1_2_bit
;BTH3.c,44 :: 		P0 = digits_array[3]; P1_3_bit=1; Delay_ms(1);P1_3_bit=0;
0x01C0	0x850F80  	MOV P0, _digits_array+3
0x01C3	0xD293    	SETB P1_3_bit
0x01C5	0x7E02    	MOV R6, 2
0x01C7	0x7F9D    	MOV R7, 157
0x01C9	0xDFFE    	DJNZ R7, PC-2
0x01CB	0xDEFC    	DJNZ R6, PC-4
0x01CD	0x00      	NOP
0x01CE	0xC293    	CLR P1_3_bit
;BTH3.c,30 :: 		for(n=0;n<250;n++)
0x01D0	0x7401    	MOV A, #1
0x01D2	0x2513    	ADD A, main_n_L0
0x01D4	0xF513    	MOV main_n_L0, A
0x01D6	0x7400    	MOV A, #0
0x01D8	0x3514    	ADDC A, main_n_L0+1
0x01DA	0xF514    	MOV main_n_L0+1, A
;BTH3.c,45 :: 		}
0x01DC	0x2105    	AJMP L_main15
L_main16:
;BTH3.c,46 :: 		number=number-1;
0x01DE	0xC3      	CLR C
0x01DF	0xE510    	MOV A, _number
0x01E1	0x9401    	SUBB A, #1
0x01E3	0xF510    	MOV _number, A
0x01E5	0xE511    	MOV A, _number+1
0x01E7	0x9400    	SUBB A, #0
0x01E9	0xF511    	MOV _number+1, A
;BTH3.c,47 :: 		} while(1);
0x01EB	0x01FF    	AJMP L_main12
;BTH3.c,48 :: 		}
0x01ED	0x80FE    	SJMP #254
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0026      [85]    _Div_16x16_U
0x007B      [91]    _mask
0x00D6       [8]    ___CC2D
0x00DE     [273]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0001       [1]    R1
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    _digits_array_index
0x0009       [1]    _i
0x000A       [2]    _digit
0x000C       [4]    _digits_array
0x0010       [2]    _number
0x0012       [1]    _shifter
0x0013       [2]    main_n_L0
0x0015       [1]    FARG_mask_num
0x0080       [1]    P0
0x0081       [1]    SP
0x0082       [1]    DPL
0x0083       [1]    DPH
0x0090       [0]    P1_0_bit
0x0090       [0]    P1_1_bit
0x0090       [0]    P1_2_bit
0x0090       [0]    P1_3_bit
0x00D0       [0]    OV_bit
0x00D0       [1]    PSW
0x00E0       [1]    ACC
0x00F0       [1]    B
//** Label List: ** 
//----------------------------------------------
  L_mask0
  L_mask1
  L_mask2
  L_mask3
  L_mask4
  L_mask5
  L_mask6
  L_mask7
  L_mask8
  L_mask9
  L_mask10
  L_mask11
  L_main12
  L_main13
  L_main14
  L_main15
  L_main16
  L_main17
  _mask
  _main
  lab_end
  loop_lab
  lab_end1
  lab_loop1
  lab_end2
  lab_loop3
  __Div_8x8_S_Bpositive
  __Div_8x8_S_Apositive
  __Div_8x8_S_Skip_Div
  __Div_8x8_S_div_ret
  __op2hi_not_zero
  __op1hi_not_zero
  __Div_16x16_U_Loop1
  __Div_16x16_U_Lab1
  __Div_16x16_U_div_ret
  __Div_16x16_U_Loop2
  __Div_16x16_U_Lab2
  __Div_16x16_U_Lab3
  __Div_16x16_S_op2hipositive
  __Div_16x16_S_op1hipositive
  __Div_16x16_S_Skip_Udiv
  __Div_16x16_S_div_ret
  __Div_32x32_U_start
  __Div_32x32_U_aux
  __Div_32x32_U_l2
  __Div_32x32_U_l1
  lw_1
  lw_2
  __Div_32x32_U_l3
  lw_3
  __Div_32x32_U_l4
  __Div_32x32_U_IR_l0
  __Div_32x32_U_l5
  __Div_32x32_U_l6
  __Div_32x32_U_l8
  __Div_32x32_U_l7
  __Div_32x32_U_IR_l1
  __Div_32x32_U_l10
  __Div_32x32_U_l9
  __Div_32x32_U_IR_l2
  __Div_32x32_S_l1
  __Div_32x32_S_call_uns
  __Div_32x32_S_l2
  __Div_32x32_S_l3
  __Div_32x32_S_div_ret
  __shl_long
  __shr_longint
  __shr_longword
  _Mul_16x16
  _Mul_32x32
  _Div_8x8_S
  _Div_16x16_U
  _Div_16x16_S
  _Div_32x32_U
  _Div_32x32_S
  _CC2D_Loop1
  _CC2PD_Loop1
  _CC2XD_Loop1
  ___DoIFC
  ___CC2D
  ___CC2PD
  ___CC2XD
